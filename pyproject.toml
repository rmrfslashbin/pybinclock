[project]
name = "pybinclock"
version = "0.1.0"
description = "Binary clock for Raspberry Pi with Unicorn Mini HAT"
authors = [{name = "Robert Sigler", email = "sigler@improvisedscience.org"}]
requires-python = ">=3.9"
dependencies = [
    "unicornhatmini>=0.0.2",
    "RPi.GPIO>=0.7.1",
    "loguru>=0.7.3",
    "gpiozero>=2.0.1",
    "Pillow>=11.0.0",
    "lgpio>=0.2.2.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=6.2",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "autopep8>=1.7.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project.scripts]
PyBinClock = "pybinclock:PyBinClock"
BinClockLEDs = "pybinclock:BinClockLEDs"

[tool.uv]
dev-dependencies = [
    "pytest>=6.2",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "autopep8>=1.7.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "unicornhatmini",
    "gpiozero",
    "RPi.*",
    "lgpio",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --cov=pybinclock --cov-report=term-missing"
testpaths = [
    "tests",
]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"

[tool.coverage.run]
branch = true
source = ["pybinclock"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]